# from creator import Creator
# from Actuators import Actuators
# import numpy as np
# from Board import Board
# from GUI import makeMove
#Create 8 puzzle
# c = Creator(8)
# x = c.initial_state()
# print(x)
# print(g)
# A=Actuators()


# a = Board(3)
# x = a.getBoard()
# c = [[1,4,7],[2,6,5],[3,None,8]]
# x = np.array(x)
# c = np.array(c)
# print(x)
# print(c)
# row , col = np.where(x == 6)
# print(row[0])
# print(col[0])
# print('-----------------')
# res=A.move_up(c)
# print(res[1])
# print('-----------------')
# res2=A.move_up(res[1])
# print(res2[1])
# print('-----------------')
# res3=A.move_down(res2[1])
# print(res3[1])
# print('-----------------')
# res4=A.move_right(res3[1])
# print(res4[1])
# print('-----------------')
# res5=A.move_left(res4[1])
# print(res5[1])

# print(a.Permutation(c))
# print(c)
# print(makeMove(c,'up'))

# s = {}
#
#
# for i in range(5):
#     s[i] = [i+1]
#     print(s)
#
# from GUI import GUI
#
# def main():
#     GUI()
#
# if __name__ == '__main__':
#     main()

# SearchSpace = {0: [[[1, 4, 7], [2, None, 8], [3, 5, 6]], 3, None, -1], 1: [[[1, 4, 7], [2, 8, None], [3, 5, 6]], 3, 'up', 0], 2: [[[1, 4, 7], [None, 2, 8], [3, 5, 6]], 3, 'down', 0], 3: [[[1, 4, 7], [2, 5, 8], [3, None, 6]], 3, 'left', 0], 4: [[[1, None, 7], [2, 4, 8], [3, 5, 6]], 3, 'right', 0], 5: [[[1, 4, 7], [2, 5, 8], [3, 6, None]], 2, 'up', 3], 6: [[[1, 4, 7], [2, 5, 8], [None, 3, 6]], 2, 'down', 3]}

# def getSolution():  # space is searchspace map of keys : [0:state, 1:heuristec value, 2:lastmove, 3:parentState key]
#     solution = list()
#     laststate = SearchSpace.popitem()
#     key = laststate[1][3]
#     solution.append(laststate[1][2])
#     print(key)
#     print(solution)
#     while True:
#         if (SearchSpace.get(key))[3] == -1:
#             print(solution)
#             return solution
#         solution.append(SearchSpace.get(key)[2])
#         print(solution)
#         key = SearchSpace.get(key)[3]
#         print(key)
#         print('*'*30)

# getSolution()


c = [[[4, 7, 5], [2, 1, 6], [3, 8, None]], [[4, 7, 5], [2, 1, 6], [3, None, 8]], [[4, 7, 5], [2, None, 6], [3, 1, 8]], [[4, None, 5], [2, 7, 6], [3, 1, 8]], [[None, 4, 5], [2, 7, 6], [3, 1, 8]], [[2, 4, 5], [None, 7, 6], [3, 1, 8]], [[2, 4, 5], [3, 7, 6], [None, 1, 8]], [[2, 4, 5], [3, 7, 6], [1, None, 8]], [[2, 4, 5], [3, None, 6], [1, 7, 8]], [[2, None, 5], [3, 4, 6], [1, 7, 8]], [[None, 2, 5], [3, 4, 6], [1, 7, 8]], [[3, 2, 5], [None, 4, 6], [1, 7, 8]], [[3, 2, 5], [1, 4, 6], [None, 7, 8]], [[2, 5, None], [3, 4, 6], [1, 7, 8]], [[2, 5, 6], [3, 4, None], [1, 7, 8]], [[2, 5, 6], [3, 4, 8], [1, 7, None]], [[2, 5, 6], [3, 4, 8], [1, None, 7]], [[2, 5, 6], [3, None, 8], [1, 4, 7]], [[2, None, 6], [3, 5, 8], [1, 4, 7]], [[None, 2, 6], [3, 5, 8], [1, 4, 7]], [[3, 2, 6], [None, 5, 8], [1, 4, 7]], [[3, 2, 6], [1, 5, 8], [None, 4, 7]], [[3, 2, 6], [1, 5, 8], [4, None, 7]], [[3, 2, 6], [1, 5, 8], [4, 7, None]], [[3, 2, 6], [1, 5, None], [4, 7, 8]], [[3, 2, None], [1, 5, 6], [4, 7, 8]], [[3, 2, 6], [1, None, 8], [4, 5, 7]], [[3, None, 6], [1, 2, 8], [4, 5, 7]], [[None, 3, 6], [1, 2, 8], [4, 5, 7]], [[1, 3, 6], [None, 2, 8], [4, 5, 7]], [[1, 3, 6], [2, None, 8], [4, 5, 7]], [[1, None, 6], [2, 3, 8], [4, 5, 7]], [[1, 3, 6], [2, 5, 8], [4, None, 7]], [[1, 3, 6], [2, 5, 8], [4, 7, None]], [[1, 3, 6], [2, 5, None], [4, 7, 8]], [[1, 3, None], [2, 5, 6], [4, 7, 8]], [[1, 3, 6], [2, 5, 8], [None, 4, 7]], [[1, 3, 6], [None, 5, 8], [2, 4, 7]], [[None, 3, 6], [1, 5, 8], [2, 4, 7]], [[3, None, 6], [1, 5, 8], [2, 4, 7]], [[3, 5, 6], [1, None, 8], [2, 4, 7]], [[3, 5, 6], [1, 4, 8], [2, None, 7]], [[3, 5, 6], [1, 4, 8], [2, 7, None]], [[3, 5, 6], [1, 4, None], [2, 7, 8]], [[3, 5, None], [1, 4, 6], [2, 7, 8]], [[3, None, 5], [1, 4, 6], [2, 7, 8]], [[None, 3, 5], [1, 4, 6], [2, 7, 8]], [[1, 3, 5], [None, 4, 6], [2, 7, 8]], [[1, 3, 5], [2, 4, 6], [None, 7, 8]], [[1, 3, 5], [2, 4, 6], [7, None, 8]], [[1, 3, 5], [2, None, 6], [7, 4, 8]], [[1, None, 5], [2, 3, 6], [7, 4, 8]], [[1, 3, 5], [4, None, 6], [2, 7, 8]], [[1, None, 5], [4, 3, 6], [2, 7, 8]], [[1, 5, None], [4, 3, 6], [2, 7, 8]], [[1, 5, 6], [4, 3, None], [2, 7, 8]], [[1, 5, 6], [4, 3, 8], [2, 7, None]], [[1, 5, 6], [4, 3, 8], [2, None, 7]], [[1, 5, 6], [4, None, 8], [2, 3, 7]], [[1, None, 6], [4, 5, 8], [2, 3, 7]], [[1, 5, 6], [None, 4, 8], [2, 3, 7]], [[None, 5, 6], [1, 4, 8], [2, 3, 7]], [[1, 5, 6], [2, 4, 8], [None, 3, 7]], [[1, 5, 6], [2, 4, 8], [3, None, 7]], [[1, 5, 6], [2, 4, 8], [3, 7, None]], [[1, 5, 6], [2, 4, None], [3, 7, 8]], [[1, 5, None], [2, 4, 6], [3, 7, 8]], [[1, None, 5], [2, 4, 6], [3, 7, 8]], [[1, 4, 5], [2, None, 6], [3, 7, 8]], [[1, 4, 5], [2, 7, 6], [3, None, 8]], [[1, 4, 5], [2, 6, None], [3, 7, 8]], [[1, 4, 5], [2, 6, 8], [3, 7, None]], [[1, 4, 5], [2, 6, 8], [3, None, 7]], [[1, 4, 5], [2, None, 8], [3, 6, 7]], [[1, None, 5], [2, 4, 8], [3, 6, 7]], [[1, 5, None], [2, 4, 8], [3, 6, 7]], [[1, 5, 8], [2, 4, None], [3, 6, 7]], [[1, 5, 8], [2, 4, 7], [3, 6, None]], [[1, 4, None], [2, 6, 5], [3, 7, 8]], [[1, 5, 6], [2, None, 8], [3, 4, 7]], [[1, None, 6], [2, 5, 8], [3, 4, 7]], [[1, 4, 5], [2, 7, 6], [3, 8, None]], [[1, 4, 5], [2, 7, None], [3, 8, 6]], [[1, 4, None], [2, 7, 5], [3, 8, 6]], [[1, 4, 5], [2, None, 7], [3, 8, 6]], [[1, None, 5], [2, 4, 7], [3, 8, 6]], [[1, 5, None], [2, 4, 7], [3, 8, 6]], [[1, 5, 7], [2, 4, None], [3, 8, 6]], [[1, 5, 7], [2, 4, 6], [3, 8, None]], [[1, 5, 7], [2, 4, 6], [3, None, 8]], [[1, 5, 7], [2, None, 6], [3, 4, 8]], [[1, None, 7], [2, 5, 6], [3, 4, 8]], [[1, 5, 7], [2, 6, None], [3, 4, 8]], [[1, 5, 7], [2, 6, 8], [3, 4, None]], [[1, 5, None], [2, 6, 7], [3, 4, 8]], [[1, None, 5], [2, 6, 7], [3, 4, 8]], [[1, 6, 5], [2, None, 7], [3, 4, 8]], [[1, 6, 5], [2, 4, 7], [3, None, 8]], [[1, 6, 5], [2, 4, 7], [3, 8, None]], [[1, 6, 5], [2, 4, None], [3, 8, 7]], [[1, 6, None], [2, 4, 5], [3, 8, 7]], [[1, None, 6], [2, 4, 5], [3, 8, 7]], [[1, 4, 6], [2, None, 5], [3, 8, 7]], [[1, 4, 6], [2, 5, None], [3, 8, 7]], [[1, 4, 6], [2, 5, 7], [3, 8, None]], [[1, 4, 6], [2, 5, 7], [3, None, 8]], [[1, 4, 6], [2, None, 7], [3, 5, 8]], [[1, None, 6], [2, 4, 7], [3, 5, 8]], [[None, 1, 6], [2, 4, 7], [3, 5, 8]], [[2, 1, 6], [None, 4, 7], [3, 5, 8]], [[2, 1, 6], [3, 4, 7], [None, 5, 8]], [[1, 6, None], [2, 4, 7], [3, 5, 8]], [[1, 6, 7], [2, 4, None], [3, 5, 8]], [[1, 6, 7], [2, 4, 8], [3, 5, None]], [[1, 4, 6], [None, 2, 7], [3, 5, 8]], [[None, 4, 6], [1, 2, 7], [3, 5, 8]], [[1, 4, 6], [3, 2, 7], [None, 5, 8]], [[1, 4, 6], [2, 7, None], [3, 5, 8]], [[1, 4, 6], [2, 7, 8], [3, 5, None]], [[1, 4, None], [2, 7, 6], [3, 5, 8]], [[1, 4, 6], [2, 5, 7], [None, 3, 8]], [[1, 4, 6], [None, 5, 7], [2, 3, 8]], [[None, 4, 6], [1, 5, 7], [2, 3, 8]], [[1, 4, None], [2, 5, 6], [3, 8, 7]], [[1, None, 4], [2, 5, 6], [3, 8, 7]], [[1, 5, 4], [2, None, 6], [3, 8, 7]], [[1, 5, 4], [2, 8, 6], [3, None, 7]], [[1, 5, 4], [2, 6, None], [3, 8, 7]], [[1, 5, 4], [2, 6, 7], [3, 8, None]], [[1, 5, 4], [2, 6, 7], [3, None, 8]], [[1, 5, 4], [2, None, 7], [3, 6, 8]], [[1, None, 4], [2, 5, 7], [3, 6, 8]], [[1, 4, None], [2, 5, 7], [3, 6, 8]], [[1, 4, 7], [2, 5, None], [3, 6, 8]]]

x = [[4, 7, 5], [2, 1, 6], [3, None, 8]]

print(x in c)

